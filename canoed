#!/usr/bin/env node
/**
 * This is a service that has an express HTTP server exposing a subset of the rai_node
 * RPC protocol. It also connects to an MQTT server
 * for pub/sub operations and uses Redis and PostgreSQL for state management.
 */

const fs = require('fs')
const express = require('express')
const bodyParser = require('body-parser')
const mqtt = require('mqtt')
const mqttRegex = require('mqtt-regex') // Used to parse out parameters from wildcard MQTT topics
const request = require('request')
const extend = require('extend') // To merge objects
const winston = require('winston') // Solid logging lib
const redis = require('redis') // For maintaining session state
const { Pool } = require('pg') // For proper database stuff
const neodoc = require('neodoc') // For nice command line opts
const {promisify} = require('util') // Promises for redisClient

// Parse out command line
const args = neodoc.run(`
Usage:
  canoed [--initialize] [--config=<path>]
  canoed -h | --help | --version
`, { optionsFirst: true, smartOptions: true })

// Default config that is extended (merged) with CONFIG_FILE
var CONFIG_FILE = 'canoed.conf'
if (args['--config']) {
  CONFIG_FILE = args['--config']
}

var config = {
  logging: {
    level: 'info'
  },
  debug: false,
  server: {
    port: 8080
  },
  rainode: {
    host: '[::1]',
    port: 7076
  },
  postgres: {
    user: 'canoe',
    host: 'localhost',
    database: 'canoe',
    password: 'secretpassword',
    port: 5432
  },
  redis: {
    host: 'localhost',
    port: 6379
  },
  mqtt: {
    url: 'tcp://localhost',
    options: {
      clientId: 'canoed',
      username: 'canoed',
      password: '1234'
    },
    subacl: '[{"pattern": "#"}]',
    pubacl: '[{"pattern": "#"}]',
    block: {
      opts: {
        qos: 2,
        retain: false
      }
    },
    sharedconfig: {
      opts: {
        qos: 2,
        retain: true
      }
    }
  }
}

// Published as retained message and shared by all wallets connecting to canoed
var sharedConfig

// MQTT Client
var mqttClient = null

// Postgres pool client
var pool = null

// Redis Client
var redisClient = null
// var asyncSet
// var asyncGet
var asyncSetAdd
var asyncSetMembers

// An Express server to handle REST calls, either from Canoe or from rai_node callback
var restServer = null

// Patterns for topics
var walletMqttRegex = mqttRegex('wallet/+id/accounts').exec // old one
var walletRegisterMqttRegex = mqttRegex('wallet/+id/register').exec // new one, protocol v1
var broadcastMqttRegex = mqttRegex('broadcast/+account').exec

// Flag to indicate we have already subscribed to topics
var subscribed = false

// Read configuration
function configure () {
  // Read config file if exists
  if (fs.existsSync(CONFIG_FILE)) {
    try {
      var fileConfig = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'))
      extend(true, config, fileConfig)
    } catch (e) {
      winston.error('Failed to parse config file: ' + CONFIG_FILE + e.message)
      process.exit(1)
    }
  }
  winston.level = config.logging.level
}

// Connect Postgres
function connectPostgres () {
  pool = new Pool(config.postgres)
  winston.info('Connected to Postgres')
}

// Initialize database for VerneMQ auth
// We also need:  CREATE EXTENSION pgcrypto;
// But that needs superuser privilege to do.
async function initializeDb () {
  var sql = `
  CREATE TABLE IF NOT EXISTS block_timestamp (
    hash varchar(64) NOT NULL,  
    timestamp timestamp default current_timestamp,  
    PRIMARY KEY (hash)  
  );
  CREATE TABLE IF NOT EXISTS vmq_auth_acl
  (
    mountpoint character varying(10) NOT NULL,
    client_id character varying(128) NOT NULL,
    username character varying(128) NOT NULL,
    password character varying(128),
    publish_acl json,
    subscribe_acl json,
    CONSTRAINT vmq_auth_acl_primary_key PRIMARY KEY (mountpoint, client_id, username)
  );`
  const client = await pool.connect()
  try {
    await client.query(sql)
  } catch (e) {
    winston.error('Error initializing db: ' + e)
  } finally {
    client.release()
  }
  await createAccount({
    wallet: config.mqtt.options.username, // This maps to clientId
    token: config.mqtt.options.username,
    tokenPass: config.mqtt.options.password,
    pubacl: '[{"pattern":"#"}]',
    subacl: '[{"pattern":"#"}]'
  })
}

// Connect Redis
function connectRedis () {
  winston.info('Connecting to Redis ...')
  redisClient = redis.createClient(config.redis.port, config.redis.host, {no_ready_check: true})
  // asyncSet = promisify(redisClient.set).bind(redisClient)
  // asyncGet = promisify(redisClient.get).bind(redisClient)
  asyncSetAdd = promisify(redisClient.sadd).bind(redisClient)
  asyncSetMembers = promisify(redisClient.smembers).bind(redisClient)
  redisClient.on('connect', function () {
    winston.info('Connected to Redis')
  })
}

// Connect to MQTT
function connectMQTT () {
  mqttClient = mqtt.connect(config.mqtt.url, config.mqtt.options)
  mqttClient.on('connect', function () {
    winston.info('Connected to MQTT server')
    subscribe()
  })

  // Where all subscribed messages come in
  mqttClient.on('message', function (topic, message) {
    switch (topic) {
      case 'sharedconfig':
        return handleSharedConfig(message)
      case 'control/canoed':
        return handleControl(message)
    }
    var params = walletMqttRegex(topic)
    if (params) {
      return handleWalletAccounts(params.id, message)
    }
    params = walletRegisterMqttRegex(topic)
    if (params) {
      return handleWalletRegister(params.id, message)
    }
    params = broadcastMqttRegex(topic)
    if (params) {
      return handleBroadcastBlock(params.account, message)
    }
    winston.error('No handler for topic %s', topic)
  })
}

function publishSharedConfig (topic, payload) {
  winston.debug('Publish: ' + topic + ' payload: ' + JSON.stringify(payload))
  mqttClient.publish(topic, JSON.stringify(payload), config.mqtt.sharedconfig.opts)
}

function publishBlock (topic, payload) {
  winston.debug('Publish: ' + topic + ' block: ' + JSON.stringify(payload))
  mqttClient.publish(topic, JSON.stringify(payload), config.mqtt.block.opts)
}

// Subscribe to control
function subscribe () {
  if (!subscribed) {
    mqttClient.subscribe('sharedconfig')
    mqttClient.subscribe('control/canoed')
    mqttClient.subscribe('wallet/+/accounts')
    mqttClient.subscribe('wallet/+/register')
    mqttClient.subscribe('broadcast/+') // account number
    winston.debug('Subscribed to selected topics')
    // /+/ for wildcards
    subscribed = true
  }
}

// Old style registering only accounts
function handleWalletAccounts (walletId, message) {
  var accounts = JSON.parse(message)
  setWalletForAccounts(accounts, walletId).then((res) => {
    winston.debug('Set wallet ' + walletId + ' for accounts ' + message)
  }, (err) => {
    winston.error('Error setting wallet for accounts: ' + err)
  })
}

// Protocol v1 style registering
function handleWalletRegister (walletId, message) {
  var meta = JSON.parse(message)
  // Pick out accounts and remove them from meta
  var accounts = meta.accounts
  delete meta.accounts
  // Add wallet id to meta
  meta.wallet = walletId
  setWalletForAccounts(accounts, JSON.stringify(meta)).then((res) => {
    winston.debug('Set meta for ' + walletId + ', accounts ' + accounts)
  }, (err) => {
    winston.error('Error setting meta for accounts: ' + err)
  })
}

function handleBroadcastBlock (account, message) {
  winston.debug('Broadcast for account ' + account + ' block ' + message)
}

function handleSharedConfig (message) {
  sharedConfig = JSON.parse(message)
  winston.debug('Saved new sharedconfig: ' + JSON.stringify(sharedConfig))
}

function handleControl (message) {
  var control = JSON.parse(message)
  winston.debug('PARSED CONTROL: ', control)
  // TODO handle control commands
}

// Start the REST server
function startRESTServer () {
  restServer = express()
  restServer.use(bodyParser.json({
    inflate: true,
    limit: '100kb',
    type: function (req) { return true } // Callbacks don't come with a media type so we always presume JSON in body
  }))

  // The RPC functions we offer Canoe
  restServer.post('/rpc', function (req, res) {
    winston.debug('GET URL', req.url)
    var spec = req.body
    var action = req.body.action
    switch (action) {
      case 'create_server_account':
        return createAccount(spec).then((r) => { res.json(r) })
      case 'canoe_server_status':
        return res.json(canoeServerStatus(spec))
      case 'quota_full':
        return res.json(quotaFull(spec))
      case 'process':
        return processBlock(spec).then((r) => { res.json(r) })
      case 'available_supply':
        return availableSupply(spec).then((r) => { res.json(r) })
      case 'ledger':
        return ledger(spec).then((r) => { res.json(r) })
      case 'chain':
        return chain(spec).then((r) => { res.json(r) })
      case 'accounts_pending':
        return accountsPending(spec).then((r) => { res.json(r) })
      case 'account_history':
        return accountHistory(spec).then((r) => { res.json(r) })
      case 'account_get':
        return accountGet(spec).then((r) => { res.json(r) })
      case 'account_info':
        return accountInfo(spec).then((r) => { res.json(r) })
      case 'account_key':
        return accountKey(spec).then((r) => { res.json(r) })
      case 'validate_account_number':
        return validateAccountNumber(spec).then((r) => { res.json(r) })
      case 'krai_from_raw':
        return doConversion(spec).then((r) => { res.json(r) })
      case 'krai_to_raw':
        return doConversion(spec).then((r) => { res.json(r) })
      case 'mrai_from_raw':
        return doConversion(spec).then((r) => { res.json(r) })
      case 'mrai_to_raw':
        return doConversion(spec).then((r) => { res.json(r) })
      case 'rai_from_raw':
        return doConversion(spec).then((r) => { res.json(r) })
      case 'rai_to_raw':
        return doConversion(spec).then((r) => { res.json(r) })
      case 'blocks_info':
        return blocksInfo(spec).then((r) => { res.json(r) })
      case 'work_generate':
        winston.log()
        return workGenerate(spec).then((r) => { res.json(r) })
      default:
        return res.json({error: 'unknown action'})
    }
  })

  // The rai_node callback entry point
  restServer.post('/callback', function (req, res) {
    handleRaiCallback(req.body)
    // We can return immediately
    res.json({})
  })

  restServer.listen(config.server.port)
  winston.info('Http server started on port ' + config.server.port)
}

function quotaFull (spec) {
  return {full: false}
}

function canoeServerStatus (spec) {
  // Called if calls fail to get a message to show
  if (fs.existsSync('canoeServerStatus.json')) {
    return JSON.parse(fs.readFileSync('canoeServerStatus.json'))
  }
  return {status: 'ok'}
}

function availableSupply (spec) {
  return callRainode(spec)
}

function accountsPending (spec) {
  return callRainode(spec)
}

function ledger (spec) {
  return callRainode(spec)
}

function chain (spec) {
  return callRainode(spec)
}

function accountHistory (spec) {
  return callRainode(spec)
}

function accountGet (spec) {
  return callRainode(spec)
}

function accountInfo (spec) {
  return callRainode(spec)
}

function accountKey (spec) {
  return callRainode(spec)
}

function validateAccountNumber (spec) {
  return callRainode(spec)
}

function doConversion (spec) {
  return callRainode(spec)
}

async function blocksInfo (spec) {
  return callRainode(spec).then((obj) => {
    // Now we want to attach proper timestamps to retreived blocks
    var ps = []
    var blocks = obj.blocks
    // Using this style to get proper closure
    Object.keys(blocks).forEach(function (hash) {
      ps.push(getTimestamp(hash).then((ts) => {
        if (ts) {
          blocks[hash].timestamp = ts
        }
      }))
    })
    return Promise.all(ps).then(() => { return obj })
  })
}

function workGenerate (spec) {
  return callRainode(spec)
}

function processBlock (spec) {
  return callRainode(spec)
}

// Create a timestamp record for given block hash, in milliseconds
async function createTimestamp (hash) {
  var values = [hash]
  var sql = `INSERT INTO block_timestamp(hash) VALUES($1) RETURNING *;`
  const client = await pool.connect()
  try {
    const res = await client.query(sql, values)
    return new Date(res.rows[0].timestamp).getTime()
  } catch (e) {
    winston.error('Error creating block: ' + e)
  } finally {
    client.release()
  }
}

// Get the timestamp for given block hash, in milliseconds
async function getTimestamp (hash) {
  var values = [hash]
  var sql = `SELECT (timestamp) FROM block_timestamp WHERE hash = $1;`
  const client = await pool.connect()
  try {
    const res = await client.query(sql, values)
    if (res.rowCount === 1) {
      return new Date(res.rows[0].timestamp).getTime()
    } else {
      return null
    }
  } catch (e) {
    winston.error('Error getting block: ' + e)
  } finally {
    client.release()
  }
}

// Create an account given a walletId, token and a tokenPass
async function createAccount (spec) {
  var values = [spec.wallet, spec.token, spec.tokenPass,
    spec.pubacl || config.mqtt.pubacl,
    spec.subacl || config.mqtt.subacl]
  var sql = `WITH x AS (
    SELECT
        ''::text AS mountpoint,
           $1::text AS client_id,
           $2::text AS username,
           $3::text AS password,
           gen_salt('bf')::text AS salt,
           $4::json AS publish_acl,
           $5::json AS subscribe_acl
    ) 
INSERT INTO vmq_auth_acl (mountpoint, client_id, username, password, publish_acl, subscribe_acl)
    SELECT 
        x.mountpoint,
        x.client_id,
        x.username,
        crypt(x.password, x.salt),
        publish_acl,
        subscribe_acl
    FROM x ON CONFLICT DO NOTHING;`
  const client = await pool.connect()
  try {
    winston.debug('Creating account: ' + JSON.stringify(values))
    await client.query(sql, values)
    winston.debug('Created account: ' + JSON.stringify(values))
    return {status: 'ok'}
  } catch (e) {
    winston.error('Error creating account: ' + e)
    return {error: '' + e}
  } finally {
    client.release()
  }
}

// function isObject (o) {
//  return o !== null && typeof o === 'object'
// }

function eachWalletForAccount (account, cb) {
  winston.debug('Get wallet for account: ' + account)
  redisClient.smembers('accounts:' + account, function (err, values) {
    if (err) throw err
    if (values) {
      for (let v of values) {
        // Nasty hack, but we know it's a hex string (old walletId) or a JSON object
        if (v[0] === '{') {
          var meta = JSON.parse(v)
          cb(meta.wallet, meta)
        } else {
          // v is old walletId (hex), then meta is null
          cb(v, null)
        }
      }
    }
  })
}

function setWalletForAccounts (accounts, value) {
  var promises = []
  for (let acc of accounts) {
    promises.push(asyncSetAdd('accounts:' + acc, value))
    // promises.push(asyncSet('accounts:' + acc, value))
  }
  return Promise.all(promises)
}

function handleCanary (hash) {
  switch (hash) {
    case 'B6DC4D64801BEC7D81DAA086A5733D251E8CBA0E9226FD6173D97C0569EC2998':
      // Turn on state block generation if not already on
      if (!sharedConfig.stateblocks.enable) {
        sharedConfig.stateblocks.enable = true
        publishSharedConfig('sharedconfig', sharedConfig)
      }
  }
}

function handleRaiCallback (blk) {
  var blk2 = JSON.parse(blk.block)

  // winston.debug('Block: ' + JSON.stringify(blk))

  // Check for canaries
  handleCanary(blk.hash)

  // Now we can pick out type of block
  var blkType = blk2.type
  var account = blk.account

  winston.debug('Acc: ' + account + ' block: ' + blkType + ' hash: ' + blk.hash)

  // Create timestamp for this block and add it to the block
  createTimestamp(blk.hash).then((ts) => {
    if (ts) {
      blk.timestamp = ts
    }
    var publishedTo = new Set()
    // Switch on block type
    switch (blkType) {
      case 'state':
        winston.debug('Is send: ' + (blk.is_send === 'true'))
        eachWalletForAccount(account, function (wallet, meta) {
          if (wallet) {
            // We only serve state blocks to Canoe protocol v1+
            // and we know that they register a meta object
            if (meta) {
              if (!publishedTo.has(wallet)) {
                publishedTo.add(wallet)
                publishBlock('wallet/' + wallet + '/block/state', blk)
              }
            } else {
              winston.warn('State block received for Canoe not capable of handling it')
            }
          }
        })
        // If a send we also need to publish to receiving wallet, if we have it
        if (blk.is_send === 'true') {
          winston.debug('Link as account: ' + (blk2.link_as_account))
          eachWalletForAccount(blk2.link_as_account, function (wallet, meta) {
            if (wallet) {
              // We only serve state blocks to Canoe protocol v1+
              // and we know that they register a meta object
              if (meta) {
                if (!publishedTo.has(wallet)) {
                  publishedTo.add(wallet)
                  publishBlock('wallet/' + wallet + '/block/state', blk)
                }
              } else {
                winston.warn('State block received for Canoe not capable of handling it')
              }
            }
          })
        }
        return
      case 'open':
        eachWalletForAccount(account, function (wallet, meta) {
          if (wallet) {
            publishBlock('wallet/' + wallet + '/block/open', blk)
          }
        })
        return
      case 'send':
        // Is this a send from one of our accounts?
        eachWalletForAccount(account, function (wallet, meta) {
          if (wallet) {
            winston.debug('Send from: ' + account + ' wallet: ' + wallet.toString())
            if (!publishedTo.has(wallet)) {
              publishedTo.add(wallet)
              publishBlock('wallet/' + wallet + '/block/send', blk)
            }
          }
        })
        // Is this a send to one of our accounts?
        eachWalletForAccount(blk2.destination, function (wallet, meta) {
          if (wallet) {
            winston.debug('Send to: ' + blk2.destination + ' wallet: ' + wallet.toString())
            if (!publishedTo.has(wallet)) {
              publishedTo.add(wallet)
              publishBlock('wallet/' + wallet + '/block/send', blk)
            }
          }
        })
        return
      case 'receive':
        eachWalletForAccount(account, function (wallet, meta) {
          if (wallet) {
            publishBlock('wallet/' + wallet + '/block/receive', blk)
          }
        })
        return
      case 'change':
        eachWalletForAccount(account, function (wallet, meta) {
          if (wallet) {
            publishBlock('wallet/' + wallet + '/block/change', blk)
          }
        })
        return
    }
    winston.error('Unknown block type: ' + blkType)
  })
}

// Make POST call to rai_node
function callRainode (payload) {
  return new Promise(function (resolve, reject) {
    request.post({
      url: 'http://' + config.rainode.host + ':' + config.rainode.port,
      headers: {'content-type': 'application/json'},
      body: JSON.stringify(payload),
      timeout: 60000,
      callback: function (err, response, body) {
        if (err) {
          winston.debug('ERROR', err)
          reject(err)
        } else {
          var answer = JSON.parse(body)
          winston.debug('ANSWER: ', JSON.stringify(answer))
          resolve(answer)
        }
      }
    })
  })
}

// Want to notify before shutting down
function handleAppExit (options, err) {
  if (err) {
    winston.error(err.stack)
  }
  if (options.cleanup) {
    winston.info('Cleaning up...')
    if (mqttClient) {
      mqttClient.end(true)
    }
  }
  if (options.exit) {
    winston.info('Calling exit...')
    process.exit()
  }
}

function configureSignals () {
  // Handle the different ways an application can shutdown
  process.on('exit', handleAppExit.bind(null, {
    cleanup: true
  }))
  process.on('SIGINT', handleAppExit.bind(null, {
    exit: true
  }))
  process.on('uncaughtException', handleAppExit.bind(null, {
    exit: true
  }))
}

// Let's start doing something
configure()
configureSignals()
connectPostgres()

if (args['--initialize']) {
  winston.debug('Initializing database ...')
  initializeDb().then(
    () => {
      winston.debug('Initialization done.')
      process.exit(0)
    },
    err => {
      winston.debug('Initialization failed: ' + err)
      process.exit(0)
    }
  )
} else {
  connectRedis()
  connectMQTT()
  startRESTServer()
}
